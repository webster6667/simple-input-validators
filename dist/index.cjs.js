"use strict";function e(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var t={exports:{}};!function(e){function t(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?(e.exports=t=function(e){return typeof e},e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=t=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.default=e.exports,e.exports.__esModule=!0),t(n)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0}(t);var n=e(t.exports);exports.isGreaterThanLimit=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.limit,r=void 0===n?null:n,o="string"==typeof r?Number(r):r,i=isNaN(Number(e))||null===e,u="number"==typeof o&&Number(e)>o;if(i)throw new TypeError("written value can be only number");return u},exports.isLessThanLimit=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.limit,r=void 0===n?null:n,o="string"==typeof r?Number(r):r,i=isNaN(Number(e))||null===e,u="number"==typeof o&&Number(e)<o;if(i)throw new TypeError("written value can be only number");return u},exports.isLongerThanLimit=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.limit,o=void 0===r?null:r,i="string"==typeof o?Number(o):o,u=!["string","number"].includes(n(e)),l=String(e).length,s="number"==typeof i&&l>i;if(u)throw new TypeError("written value can be only string or number");return s},exports.isMailInvalid=function(e){var t=["object","function","undefined"].includes(n(e)),r=!/.+@.+\..+/i.test(String(e));if(t)throw new TypeError("written value can be only string or number");return r},exports.isNumberValid=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=["object","function","undefined"].includes(n(e))||null===e;e=String(e);var o=t||{},i=o.shouldLockNegativeNumber,u=void 0!==i&&i,l=o.shouldLockFloatNumber,s=void 0!==l&&l,a=o.allowableSymbols,c=void 0===a?[]:a,p=o.customRegExp,f=void 0===p?null:p,b=o.isLiveValidator,d=void 0!==b&&b,m=c.includes("-")?c.join("").replace(/-/g,"\\-"):c.join(""),y="".concat(m,"1-9"),v=new RegExp("^[-]?([".concat(y,"]+)?[.]?([").concat(y,"]+)?$")),g=d?["-.",".",".-"]:["-.",".",".-","-"],w=g.includes(e),x=!0;if(e){var h=v;u&&(h=s?new RegExp("^[".concat(y,"]+$")):new RegExp("^([".concat(y,"]+)?[.]?([").concat(y,"]+)?$"))),s&&(h=u?new RegExp("^[".concat(y,"]+$")):new RegExp("^[-]?([".concat(y,"]+)?$"))),x=h.test(e),w&&(x=!1),f&&(x=f.test(e))}if(r)throw new TypeError("written value can be only number or string");return x},exports.isShorterThanLimit=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.limit,o=void 0===r?null:r,i="string"==typeof o?Number(o):o,u=!["string","number"].includes(n(e)),l=String(e).length,s="number"==typeof i&&l<i;if(u)throw new TypeError("written value can be only string or number");return s},exports.isWrittenValueEmpty=function(e){var t=["object","function","undefined"].includes(n(e)),r=0===String(e).length;if(t)throw new TypeError("written value can be only string or number");return r};
